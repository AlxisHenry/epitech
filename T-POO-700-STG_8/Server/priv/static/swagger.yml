openapi: 3.0.3
info:
  title: Time Manager API
  description: Platform-independent API for exchanging and storing time management data for Gotham City Hall
  version: 2.0.1
servers:
  - url: http://localhost:4000/api
    description: Local server

paths:
  /users:
    get:
      summary: List all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Users retrieved
    post:
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@example.com"
                username:
                  type: string
                  example: "username"
                password:
                  type: string
                  example: "password"
      responses:
        '201':
          description: User created
  /users/{id}:
    get:
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to get
          schema:
            type: string
      responses:
        '200':
          description: User retrieved
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: string
      responses:
        '204':
          description: User deleted

  /registration:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@example.com"
                username:
                  type: string
                  example: "username"
                password:
                  type: string
                  example: "password"
      responses:
        '201':
          description: User registered

  /auth:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@example.com"
                password:
                  type: string
                  example: "password"
      responses:
        '200':
          description: User logged in

  /auth/me:
    get:
      summary: Get current authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user retrieved
  /clocks:
    post:
      summary: Clock in/out
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Clocked in/out
    get:
      summary: Get all clocks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Clocks retrieved

  /clocks/{user_id}:
    get:
      summary: Get clocks by user ID
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
      responses:
        '200':
          description: Clocks retrieved

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT